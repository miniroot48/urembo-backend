import { PrismaService } from '../prisma/prisma.service';
import { user_role } from '@prisma/client';
import { CreateCmsBannerDto, UpdateCmsBannerDto, CreateCmsFeaturedItemDto, UpdateCmsFeaturedItemDto, CreateCmsFooterContentDto, UpdateCmsFooterContentDto, CreateCmsPageBannerDto, UpdateCmsPageBannerDto, CreateCmsPopupDto, UpdateCmsPopupDto, CreateCmsThemeSettingDto, CreateCmsCategoryBannerDto, UpdateCmsCategoryBannerDto, CreateCmsCategoryDto, UpdateCmsCategoryDto, CreateCmsPromotionalCardDto, UpdateCmsPromotionalCardDto, CreateCmsPagesDto, UpdateCmsPagesDto } from './dto';
export declare class CmsService {
    private prisma;
    constructor(prisma: PrismaService);
    private checkAdminAccess;
    createBanner(userRole: user_role, createBannerDto: CreateCmsBannerDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }>;
    getAllBanners(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }[]>;
    getBannerById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }>;
    updateBanner(id: string, userRole: user_role, updateBannerDto: UpdateCmsBannerDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }>;
    deleteBanner(id: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }>;
    createFeaturedItem(userRole: user_role, createFeaturedItemDto: CreateCmsFeaturedItemDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemId: string;
        itemType: string;
    }>;
    getAllFeaturedItems(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemId: string;
        itemType: string;
    }[]>;
    getFeaturedItemById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemId: string;
        itemType: string;
    }>;
    updateFeaturedItem(id: string, userRole: user_role, updateFeaturedItemDto: UpdateCmsFeaturedItemDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemId: string;
        itemType: string;
    }>;
    deleteFeaturedItem(id: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemId: string;
        itemType: string;
    }>;
    createFooterContent(userRole: user_role, createFooterContentDto: CreateCmsFooterContentDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        content: import("@prisma/client/runtime/library").JsonValue;
        sectionKey: string;
    }>;
    getAllFooterContent(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        content: import("@prisma/client/runtime/library").JsonValue;
        sectionKey: string;
    }[]>;
    getFooterContentBySectionKey(sectionKey: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        content: import("@prisma/client/runtime/library").JsonValue;
        sectionKey: string;
    }>;
    updateFooterContent(sectionKey: string, userRole: user_role, updateFooterContentDto: UpdateCmsFooterContentDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        content: import("@prisma/client/runtime/library").JsonValue;
        sectionKey: string;
    }>;
    deleteFooterContent(sectionKey: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        content: import("@prisma/client/runtime/library").JsonValue;
        sectionKey: string;
    }>;
    createPageBanner(userRole: user_role, createPageBannerDto: CreateCmsPageBannerDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }>;
    getAllPageBanners(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }[]>;
    getPageBannerByRoute(pageRoute: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }>;
    updatePageBanner(id: string, userRole: user_role, updatePageBannerDto: UpdateCmsPageBannerDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }>;
    deletePageBanner(id: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }>;
    createPopup(userRole: user_role, createPopupDto: CreateCmsPopupDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        content: string;
        startDate: Date | null;
        endDate: Date | null;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }>;
    getAllPopups(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        content: string;
        startDate: Date | null;
        endDate: Date | null;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }[]>;
    getPopupById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        content: string;
        startDate: Date | null;
        endDate: Date | null;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }>;
    updatePopup(id: string, userRole: user_role, updatePopupDto: UpdateCmsPopupDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        content: string;
        startDate: Date | null;
        endDate: Date | null;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }>;
    deletePopup(id: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        content: string;
        startDate: Date | null;
        endDate: Date | null;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }>;
    createThemeSetting(userRole: user_role, createThemeSettingDto: CreateCmsThemeSettingDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }>;
    getAllThemeSettings(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }[]>;
    getThemeSettingByKey(settingKey: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }>;
    updateThemeSetting(settingKey: string, userRole: user_role, settingValue: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }>;
    deleteThemeSetting(settingKey: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }>;
    createCategoryBanner(userRole: user_role, createCategoryBannerDto: CreateCmsCategoryBannerDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }>;
    getAllCategoryBanners(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }[]>;
    getCategoryBannersBySlug(categorySlug: string, isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }[]>;
    getCategoryBannerById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }>;
    updateCategoryBanner(id: string, userRole: user_role, updateCategoryBannerDto: UpdateCmsCategoryBannerDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }>;
    deleteCategoryBanner(id: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }>;
    createCategory(userRole: user_role, createCategoryDto: CreateCmsCategoryDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }>;
    getAllCategories(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }[]>;
    getCategoryById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }>;
    updateCategory(id: string, userRole: user_role, updateCategoryDto: UpdateCmsCategoryDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }>;
    deleteCategory(id: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }>;
    createPromotionalCard(userRole: user_role, createPromotionalCardDto: CreateCmsPromotionalCardDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }>;
    getAllPromotionalCards(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }[]>;
    getPromotionalCardById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }>;
    updatePromotionalCard(id: string, userRole: user_role, updatePromotionalCardDto: UpdateCmsPromotionalCardDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }>;
    deletePromotionalCard(id: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }>;
    getAllCmsData(): Promise<{
        banners: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            imageUrl: string;
            title: string;
            subtitle: string | null;
            mobileImageUrl: string | null;
            ctaText: string | null;
            ctaLink: string | null;
        }[];
        featuredItems: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            itemId: string;
            itemType: string;
        }[];
        footerContent: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            title: string;
            content: import("@prisma/client/runtime/library").JsonValue;
            sectionKey: string;
        }[];
        pageBanners: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            imageUrl: string;
            title: string;
            subtitle: string | null;
            mobileImageUrl: string | null;
            pageRoute: string;
        }[];
        popups: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            title: string;
            content: string;
            startDate: Date | null;
            endDate: Date | null;
            popupType: string;
            targetPages: string[];
            maxDisplaysPerSession: number;
        }[];
        themeSettings: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            settingKey: string;
            settingValue: string;
            settingType: string;
        }[];
        categoryBanners: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            imageUrl: string;
            title: string;
            subtitle: string | null;
            mobileImageUrl: string | null;
            ctaText: string | null;
            categorySlug: string;
            ctaUrl: string | null;
        }[];
        categories: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            imageUrl: string;
            categoryId: string | null;
            subcategoryId: string | null;
            categoryType: string;
            providerCount: number;
            productCategoryId: string | null;
            productSubcategoryId: string | null;
        }[];
        promotionalCards: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            position: number;
            isActive: boolean;
            imageUrl: string;
            title: string;
            subtitle: string | null;
            ctaText: string | null;
            ctaLink: string | null;
            backgroundColor: string;
            textColor: string;
        }[];
    }>;
    createCmsPage(userRole: user_role, createCmsPagesDto: CreateCmsPagesDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    getAllCmsPages(isActive?: boolean): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }[]>;
    getCmsPageBySlug(slug: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    getCmsPageById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    updateCmsPage(id: string, userRole: user_role, updateCmsPagesDto: UpdateCmsPagesDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    deleteCmsPage(id: string, userRole: user_role): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
}
