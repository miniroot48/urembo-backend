import { CmsService } from './cms.service';
import { CreateCmsBannerDto, UpdateCmsBannerDto, CreateCmsFeaturedItemDto, UpdateCmsFeaturedItemDto, CreateCmsFooterContentDto, UpdateCmsFooterContentDto, CreateCmsPageBannerDto, UpdateCmsPageBannerDto, CreateCmsPopupDto, UpdateCmsPopupDto, CreateCmsThemeSettingDto, CreateCmsCategoryBannerDto, UpdateCmsCategoryBannerDto, CreateCmsCategoryDto, UpdateCmsCategoryDto, CreateCmsPromotionalCardDto, UpdateCmsPromotionalCardDto, CreateCmsPagesDto, UpdateCmsPagesDto } from './dto';
export declare class CmsController {
    private cmsService;
    constructor(cmsService: CmsService);
    createBanner(createBannerDto: CreateCmsBannerDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }>;
    getAllBanners(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }[]>;
    getBannerById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }>;
    updateBanner(id: string, updateBannerDto: UpdateCmsBannerDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }>;
    deleteBanner(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        ctaLink: string | null;
    }>;
    createFeaturedItem(createFeaturedItemDto: CreateCmsFeaturedItemDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemType: string;
        itemId: string;
    }>;
    getAllFeaturedItems(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemType: string;
        itemId: string;
    }[]>;
    getFeaturedItemById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemType: string;
        itemId: string;
    }>;
    updateFeaturedItem(id: string, updateFeaturedItemDto: UpdateCmsFeaturedItemDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemType: string;
        itemId: string;
    }>;
    deleteFeaturedItem(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        itemType: string;
        itemId: string;
    }>;
    createFooterContent(createFooterContentDto: CreateCmsFooterContentDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        sectionKey: string;
        content: import("@prisma/client/runtime/library").JsonValue;
    }>;
    getAllFooterContent(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        sectionKey: string;
        content: import("@prisma/client/runtime/library").JsonValue;
    }[]>;
    getFooterContentBySectionKey(sectionKey: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        sectionKey: string;
        content: import("@prisma/client/runtime/library").JsonValue;
    }>;
    updateFooterContent(sectionKey: string, updateFooterContentDto: UpdateCmsFooterContentDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        sectionKey: string;
        content: import("@prisma/client/runtime/library").JsonValue;
    }>;
    deleteFooterContent(sectionKey: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        title: string;
        sectionKey: string;
        content: import("@prisma/client/runtime/library").JsonValue;
    }>;
    createPageBanner(createPageBannerDto: CreateCmsPageBannerDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }>;
    getAllPageBanners(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }[]>;
    getPageBannerByRoute(pageRoute: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }>;
    updatePageBanner(id: string, updatePageBannerDto: UpdateCmsPageBannerDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }>;
    deletePageBanner(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        pageRoute: string;
    }>;
    createPopup(createPopupDto: CreateCmsPopupDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        startDate: Date | null;
        endDate: Date | null;
        content: string;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }>;
    getAllPopups(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        startDate: Date | null;
        endDate: Date | null;
        content: string;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }[]>;
    getPopupById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        startDate: Date | null;
        endDate: Date | null;
        content: string;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }>;
    updatePopup(id: string, updatePopupDto: UpdateCmsPopupDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        startDate: Date | null;
        endDate: Date | null;
        content: string;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }>;
    deletePopup(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        title: string;
        startDate: Date | null;
        endDate: Date | null;
        content: string;
        popupType: string;
        targetPages: string[];
        maxDisplaysPerSession: number;
    }>;
    createThemeSetting(createThemeSettingDto: CreateCmsThemeSettingDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }>;
    getAllThemeSettings(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }[]>;
    getThemeSettingByKey(settingKey: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }>;
    updateThemeSetting(settingKey: string, settingValue: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }>;
    deleteThemeSetting(settingKey: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        settingKey: string;
        settingValue: string;
        settingType: string;
    }>;
    createCategoryBanner(createCategoryBannerDto: CreateCmsCategoryBannerDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }>;
    getAllCategoryBanners(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }[]>;
    getCategoryBannersBySlug(categorySlug: string, isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }[]>;
    getCategoryBannerById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }>;
    updateCategoryBanner(id: string, updateCategoryBannerDto: UpdateCmsCategoryBannerDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }>;
    deleteCategoryBanner(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        mobileImageUrl: string | null;
        ctaText: string | null;
        categorySlug: string;
        ctaUrl: string | null;
    }>;
    createCategory(createCategoryDto: CreateCmsCategoryDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }>;
    getAllCategories(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }[]>;
    getCategoryById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }>;
    updateCategory(id: string, updateCategoryDto: UpdateCmsCategoryDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }>;
    deleteCategory(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        position: number;
        isActive: boolean;
        imageUrl: string;
        categoryId: string | null;
        subcategoryId: string | null;
        categoryType: string;
        providerCount: number;
        productCategoryId: string | null;
        productSubcategoryId: string | null;
    }>;
    createPromotionalCard(createPromotionalCardDto: CreateCmsPromotionalCardDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }>;
    getAllPromotionalCards(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }[]>;
    getPromotionalCardById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }>;
    updatePromotionalCard(id: string, updatePromotionalCardDto: UpdateCmsPromotionalCardDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }>;
    deletePromotionalCard(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        position: number;
        isActive: boolean;
        imageUrl: string;
        title: string;
        subtitle: string | null;
        ctaText: string | null;
        ctaLink: string | null;
        backgroundColor: string;
        textColor: string;
    }>;
    createCmsPage(createCmsPagesDto: CreateCmsPagesDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    getAllCmsPages(isActive?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }[]>;
    getCmsPageBySlug(slug: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    getCmsPageById(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    updateCmsPage(id: string, updateCmsPagesDto: UpdateCmsPagesDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    deleteCmsPage(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        slug: string;
        title: string;
        content: string | null;
        contentType: string;
        pdfUrl: string | null;
    }>;
    getAllCmsData(): Promise<{
        banners: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            imageUrl: string;
            title: string;
            subtitle: string | null;
            mobileImageUrl: string | null;
            ctaText: string | null;
            ctaLink: string | null;
        }[];
        featuredItems: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            itemType: string;
            itemId: string;
        }[];
        footerContent: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            title: string;
            sectionKey: string;
            content: import("@prisma/client/runtime/library").JsonValue;
        }[];
        pageBanners: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            imageUrl: string;
            title: string;
            subtitle: string | null;
            mobileImageUrl: string | null;
            pageRoute: string;
        }[];
        popups: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            title: string;
            startDate: Date | null;
            endDate: Date | null;
            content: string;
            popupType: string;
            targetPages: string[];
            maxDisplaysPerSession: number;
        }[];
        themeSettings: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            settingKey: string;
            settingValue: string;
            settingType: string;
        }[];
        categoryBanners: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            imageUrl: string;
            title: string;
            subtitle: string | null;
            mobileImageUrl: string | null;
            ctaText: string | null;
            categorySlug: string;
            ctaUrl: string | null;
        }[];
        categories: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            position: number;
            isActive: boolean;
            imageUrl: string;
            categoryId: string | null;
            subcategoryId: string | null;
            categoryType: string;
            providerCount: number;
            productCategoryId: string | null;
            productSubcategoryId: string | null;
        }[];
        promotionalCards: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            position: number;
            isActive: boolean;
            imageUrl: string;
            title: string;
            subtitle: string | null;
            ctaText: string | null;
            ctaLink: string | null;
            backgroundColor: string;
            textColor: string;
        }[];
    }>;
}
