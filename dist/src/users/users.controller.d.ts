import { UsersService } from './users.service';
import { user_role, onboarding_status } from '@prisma/client';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateProfileDto } from './dto/update-profile.dto';
import { SuspendUserDto } from './dto/suspend-user.dto';
import { UpdateOnboardingStatusDto } from './dto/update-onboarding-status.dto';
import { UpdatePaymentDetailsDto } from './dto/update-payment-details.dto';
export declare class UsersController {
    private usersService;
    constructor(usersService: UsersService);
    getProfile(req: any): Promise<{
        id: string;
        email: string;
        fullName: string;
        phone: string;
        avatarUrl: string;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string;
        businessDescription: string;
        businessAddress: string;
        businessPhone: string;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date;
        suspendedBy: string;
        suspensionReason: string;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue;
        paymentAccountType: string;
        paymentDetailsVerified: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateProfile(req: any, updateData: UpdateProfileDto): Promise<{
        id: string;
        email: string;
        fullName: string;
        phone: string;
        avatarUrl: string;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string;
        businessDescription: string;
        businessAddress: string;
        businessPhone: string;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date;
        suspendedBy: string;
        suspensionReason: string;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue;
        paymentAccountType: string;
        paymentDetailsVerified: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getAllUsers(role?: user_role, page?: string, limit?: string): Promise<{
        users: {
            id: string;
            email: string;
            fullName: string;
            phone: string;
            avatarUrl: string;
            role: import(".prisma/client").$Enums.user_role;
            businessName: string;
            businessDescription: string;
            businessAddress: string;
            businessPhone: string;
            isVerified: boolean;
            isSuspended: boolean;
            suspendedAt: Date;
            suspendedBy: string;
            suspensionReason: string;
            onboardingStatus: import(".prisma/client").$Enums.onboarding_status;
            paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue;
            paymentAccountType: string;
            paymentDetailsVerified: boolean;
            createdAt: Date;
            updatedAt: Date;
        }[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    }>;
    getUserById(id: string): Promise<{
        id: string;
        email: string;
        fullName: string;
        phone: string;
        avatarUrl: string;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string;
        businessDescription: string;
        businessAddress: string;
        businessPhone: string;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date;
        suspendedBy: string;
        suspensionReason: string;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue;
        paymentAccountType: string;
        paymentDetailsVerified: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    verifyUser(id: string): Promise<{
        id: string;
        email: string;
        password: string;
        fullName: string | null;
        phone: string | null;
        avatarUrl: string | null;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string | null;
        businessDescription: string | null;
        businessAddress: string | null;
        businessPhone: string | null;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date | null;
        suspendedBy: string | null;
        suspensionReason: string | null;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status | null;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue | null;
        paymentAccountType: string | null;
        paymentDetailsVerified: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    deleteUser(id: string): Promise<{
        id: string;
        email: string;
        password: string;
        fullName: string | null;
        phone: string | null;
        avatarUrl: string | null;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string | null;
        businessDescription: string | null;
        businessAddress: string | null;
        businessPhone: string | null;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date | null;
        suspendedBy: string | null;
        suspensionReason: string | null;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status | null;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue | null;
        paymentAccountType: string | null;
        paymentDetailsVerified: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    createUser(createData: CreateUserDto): Promise<{
        id: string;
        email: string;
        fullName: string;
        phone: string;
        avatarUrl: string;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string;
        businessDescription: string;
        businessAddress: string;
        businessPhone: string;
        isVerified: boolean;
        isSuspended: boolean;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status;
        createdAt: Date;
        updatedAt: Date;
    }>;
    suspendUser(id: string, body: SuspendUserDto, req: any): Promise<{
        id: string;
        email: string;
        password: string;
        fullName: string | null;
        phone: string | null;
        avatarUrl: string | null;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string | null;
        businessDescription: string | null;
        businessAddress: string | null;
        businessPhone: string | null;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date | null;
        suspendedBy: string | null;
        suspensionReason: string | null;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status | null;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue | null;
        paymentAccountType: string | null;
        paymentDetailsVerified: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    unsuspendUser(id: string): Promise<{
        id: string;
        email: string;
        password: string;
        fullName: string | null;
        phone: string | null;
        avatarUrl: string | null;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string | null;
        businessDescription: string | null;
        businessAddress: string | null;
        businessPhone: string | null;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date | null;
        suspendedBy: string | null;
        suspensionReason: string | null;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status | null;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue | null;
        paymentAccountType: string | null;
        paymentDetailsVerified: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    updateOnboardingStatus(id: string, body: UpdateOnboardingStatusDto): Promise<{
        id: string;
        email: string;
        password: string;
        fullName: string | null;
        phone: string | null;
        avatarUrl: string | null;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string | null;
        businessDescription: string | null;
        businessAddress: string | null;
        businessPhone: string | null;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date | null;
        suspendedBy: string | null;
        suspensionReason: string | null;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status | null;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue | null;
        paymentAccountType: string | null;
        paymentDetailsVerified: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    updatePaymentDetails(id: string, body: UpdatePaymentDetailsDto): Promise<{
        id: string;
        email: string;
        password: string;
        fullName: string | null;
        phone: string | null;
        avatarUrl: string | null;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string | null;
        businessDescription: string | null;
        businessAddress: string | null;
        businessPhone: string | null;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date | null;
        suspendedBy: string | null;
        suspensionReason: string | null;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status | null;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue | null;
        paymentAccountType: string | null;
        paymentDetailsVerified: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    verifyPaymentDetails(id: string): Promise<{
        id: string;
        email: string;
        password: string;
        fullName: string | null;
        phone: string | null;
        avatarUrl: string | null;
        role: import(".prisma/client").$Enums.user_role;
        businessName: string | null;
        businessDescription: string | null;
        businessAddress: string | null;
        businessPhone: string | null;
        isVerified: boolean;
        isSuspended: boolean;
        suspendedAt: Date | null;
        suspendedBy: string | null;
        suspensionReason: string | null;
        onboardingStatus: import(".prisma/client").$Enums.onboarding_status | null;
        paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue | null;
        paymentAccountType: string | null;
        paymentDetailsVerified: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    getUsersByRole(role: user_role, page?: string, limit?: string): Promise<{
        users: {
            id: string;
            email: string;
            fullName: string;
            phone: string;
            avatarUrl: string;
            role: import(".prisma/client").$Enums.user_role;
            businessName: string;
            businessDescription: string;
            businessAddress: string;
            businessPhone: string;
            isVerified: boolean;
            isSuspended: boolean;
            suspendedAt: Date;
            suspendedBy: string;
            suspensionReason: string;
            onboardingStatus: import(".prisma/client").$Enums.onboarding_status;
            paymentAccountDetails: import("@prisma/client/runtime/library").JsonValue;
            paymentAccountType: string;
            paymentDetailsVerified: boolean;
            createdAt: Date;
            updatedAt: Date;
        }[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    }>;
    getSuspendedUsers(page?: string, limit?: string): Promise<{
        users: {
            id: string;
            email: string;
            fullName: string;
            phone: string;
            role: import(".prisma/client").$Enums.user_role;
            businessName: string;
            isSuspended: boolean;
            suspendedAt: Date;
            suspendedBy: string;
            suspensionReason: string;
            createdAt: Date;
        }[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    }>;
    getUsersByOnboardingStatus(status: onboarding_status, page?: string, limit?: string): Promise<{
        users: {
            id: string;
            email: string;
            fullName: string;
            phone: string;
            role: import(".prisma/client").$Enums.user_role;
            businessName: string;
            onboardingStatus: import(".prisma/client").$Enums.onboarding_status;
            createdAt: Date;
        }[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    }>;
}
